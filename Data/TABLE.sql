CREATE TABLE Profiles (
  rollno INT PRIMARY KEY,
  username VARCHAR(255) NOT NULL,
  email VARCHAR(255) NOT NULL,
  passwords VARCHAR(255) NOT NULL,
  years INT NOT NULL,
  sem INT NOT NULL,
  dept_name VARCHAR(255) NOT NULL,
  courses JSON
);

CREATE TABLE Courses (
course_id VARCHAR(255) PRIMARY KEY,
courses VARCHAR(255) NOT NULL,
dept_name VARCHAR(255) NOT NULL,
years INT NOT NULL,
sem INT NOT NULL
);

CREATE TABLE Videos (
video_id INT AUTO_INCREMENT PRIMARY KEY,
course_id VARCHAR(255) NOT NULL,
rollno INT NOT NULL,
video_name VARCHAR(255) NOT NULL,
video_link VARCHAR(255) NOT NULL,
attachments VARCHAR(255),
descriptions VARCHAR(255),
views INT DEFAULT 0,
likes INT DEFAULT 0,
FOREIGN KEY (course_id) 
    REFERENCES Courses(course_id)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
FOREIGN KEY (rollno)
    REFERENCES Profiles(rollno)
    ON DELETE CASCADE
    ON UPDATE CASCADE
);

CREATE TABLE WatchLater (
id INT AUTO_INCREMENT PRIMARY KEY,
rollno INT NOT NULL,
video_id INT NOT NULL,
FOREIGN KEY (video_id) 
    REFERENCES Videos(video_id)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
FOREIGN KEY (rollno)
    REFERENCES Profiles(rollno)
    ON DELETE CASCADE
    ON UPDATE CASCADE
);

CREATE TABLE Feedback (
id INT AUTO_INCREMENT PRIMARY KEY,
rollno INT NOT NULL,
video_id INT NOT NULL,
feedback VARCHAR(255),
FOREIGN KEY (video_id) 
    REFERENCES Videos(video_id)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
FOREIGN KEY (rollno)
    REFERENCES Profiles(rollno)
    ON DELETE CASCADE
    ON UPDATE CASCADE
);

CREATE TABLE LOG (
PROID INT primary key,
USERNAME VARCHAR(255) NOT NULL,
YEARS INT NOT NULL,
SEM INT NOT NULL,
DEPT_NAME INT NOT NULL,
ACTIONTIMESTAMP TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE OR REPLACE TRIGGER INS_LOG 
AFTER INSERT ON Profiles
FOR EACH ROW 
BEGIN
INSERT INTO LOG(PROID,USERNAME,YEARS,SEM,DEPT_NAME,ACTIONTIMESTAMP)
VALUES
(:NEW.ROLLNO,:NEW.USERNAME,:NEW.YEARS,:NEW.SEM,:NEW.DEPT_NAME,CURRENT_TIMESTAMP);
END;

CREATE OR REPLACE TRIGGER DEL_LOG
AFTER DELETE ON Profiles
FOR EACH ROW 
BEGIN
DELETE FROM LOG 
WHERE LOG.PROID = :OLD.ROLLNO;
END;

CREATE OR REPLACE TRIGGER UPD_LOG
AFTER UPDATE ON Profiles 
FOR EACH ROW 
BEGIN 
IF :NEW.SEM <> :OLD.SEM THEN 
UPDATE LOG
SET SEM := :NEW.SEM 
WHERE LOG.PROID = :OLD.ROLLNO ;
UPDATE LOG
SET YEARS := (:NEW.SEM/2)+(:NEW.SEM%2)
WHERE LOG.PROID = OLD.ROLLNO ;
END;